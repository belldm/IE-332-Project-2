library(jpeg)
library(keras)

# Load the pre-trained machine learning model
model <- load_model_hdf5("./dandelion_model")

# Define the FGSM attack function
fgsm_attack <- function(image, epsilon) {
  # Convert the image to a tensor
  image_tensor <- array_reshape(image, c(1, dim(image)))
  
  # Compute the loss function with respect to the image tensor
  loss <- function(x) {
    mean(k_categorical_crossentropy(model$predict(x), target_category = 2))
  }
  
  # Compute the gradient of the loss with respect to the image tensor
  gradient <- gradient_adjoint(image_tensor, loss)
  
  # Compute the perturbation as the sign of the gradient
  perturbation <- sign(gradient)
  
  # Add the perturbation to the image, scaled by epsilon
  perturbed_image <- image + epsilon * perturbation
  
  # Clip the pixel values to the [0, 1] range
  perturbed_image <- pmax(0, pmin(perturbed_image, 1))
  
  # Return the perturbed image
  perturbed_image
}

# Get a list of all JPG files in the "dandelions" folder
file_list <- list.files(path = "dandelions", pattern = "\\.jpg$", full.names = TRUE)

# Loop over each file in the list
for (file in file_list) {
  # Read the image
  image <- readJPEG(file)
  
  # Perform the FGSM attack with epsilon=0.1
  perturbed_image <- fgsm_attack(image, epsilon=0.1)
  
  # Write the perturbed image to a new file
  writeJPEG(perturbed_image, paste0(file, "_perturbed.jpg"))
}


# Get a list of all JPG files in the "grass" folder
file_list2 <- list.files(path = "grass", pattern = "\\.jpg$", full.names = TRUE)

# Loop over each file in the list
for (file in file_list2) {
  # Read the image
  image <- readJPEG(file)
  
  # Perform the FGSM attack with epsilon=0.1
  perturbed_image <- fgsm_attack(image, epsilon=0.1)
  
  # Write the perturbed image to a new file
  writeJPEG(perturbed_image, paste0(file, "_perturbed.jpg"))
}




library(jpeg)
library(imager)
library(magrittr)

# Load the pre-trained machine learning model
model <- load_model_hdf5("./dandelion_model")

# Define the adversarial perturbation strength
epsilon <- 0.1

# Get a list of all JPG files in the "dandelions" folder
file_list <- list.files(path = "dandelions", pattern = "\\.jpg$", full.names = TRUE)

# Loop over each file in the list
for (file in file_list) {
  # Read the image
  image <- as.cimg(readJPEG(file))
  
  # dimensions of jpg
  width <- dim(image)[1]
  height <- dim(image)[2]
  
  # Define the input to the model
  input <- image %>% 
    as_array() %>% 
    array_reshape(c(1, width, height, 3))
  
  # Get the model's prediction for the original image
  original_prediction <- predict(model, input)
  
  # Generate the adversarial perturbation
  perturbation <- array(runif(width*height*3, min=-epsilon, max=epsilon), dim=c(width, height, 3))
  
  # Create the adversarial image
  adversarial_image <- image + perturbation
  
  # Define the input to the model for the adversarial image
  adversarial_input <- adversarial_image %>% 
    as_array() %>% 
    array_reshape(c(1, width, height, 3))
  
  # Get the model's prediction for the adversarial image
  adversarial_prediction <- predict(model, adversarial_input)
  
  # Write the adversarial image to a new file
  writeJPEG(as.raster(adversarial_image), paste0(file, "_adversarial.jpg"))
}

