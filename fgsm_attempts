# Load the required libraries
library(jpeg)
library(keras)

# Define the function that performs FGSM attack
fgsm_attack <- function(image, epsilon, model) {
  # Compute the loss and gradient of the image with respect to the model's input
  loss <- function(x) keras::k_categorical_crossentropy(model(x), model(image))
  grad <- keras::k_gradien(image, model$output, x = image)
  
  # Compute the perturbation based on the gradient and epsilon
  perturbation <- epsilon * sign(grad)
  
  # Apply the perturbation to the image and clip the values to [0, 1]
  perturbed_image <- pmax(pmin(image + perturbation, 1), 0)
  
  return(perturbed_image)
}

# Load the pre-trained model
model <- load_model_hdf5("./dandelion_model")

# Define the epsilon value
epsilon <- 0.1

# Loop over each file in the "dandelions" folder
file_list <- list.files(path = "dandelions", pattern = "\\.jpg$", full.names = TRUE)
for (file in file_list) {
  # Read the image
  image <- readJPEG(file)
  
  # Reshape the image to a 4D tensor with a batch size of 1
  image <- array_reshape(image, dim = c(1, dim(image)))
  
  # Perform FGSM attack on the image
  perturbed_image <- fgsm_attack(image, epsilon, model)
  
  # Reshape the perturbed image back to a 3D tensor
  perturbed_image <- array_reshape(perturbed_image, dim = dim(image)[-1])
  
  # Write the modified image to a new file
  writeJPEG(perturbed_image, paste0(file, "_perturbed.jpg"))
}

# Loop over each file in the "grass" folder
file_list2 <- list.files(path = "grass", pattern = "\\.jpg$", full.names = TRUE)
for (file in file_list2) {
  # Read the image
  image <- readJPEG(file)
  
  # Reshape the image to a 4D tensor with a batch size of 1
  image <- array_reshape(image, dim = c(1, dim(image)))
  
  # Perform FGSM attack on the image
  perturbed_image <- fgsm_attack(image, epsilon, model)
  
  # Reshape the perturbed image back to a 3D tensor
  perturbed_image <- array_reshape(perturbed_image, dim = dim(image)[-1])
  
  # Write the modified image to a new file
  writeJPEG(perturbed_image, paste0(file, "_perturbed.jpg"))
}






# Load the required libraries
library(jpeg)
library(keras)

# Define the function that performs FGSM attack
fgsm_attack <- function(image, epsilon, model) {
  # Compute the loss and gradient of the image with respect to the model's input
  loss <- function(x) keras::k_categorical_crossentropy(model(x), model(image))
  grad <- keras::gradients(loss, image)[[1]]
  
  # Compute the perturbation based on the gradient and epsilon
  perturbation <- epsilon * sign(grad)
  
  # Apply the perturbation to the image and clip the values to [0, 1]
  perturbed_image <- pmax(pmin(image + perturbation, 1), 0)
  
  return(perturbed_image)
}

# Load the pre-trained model
model <- load_model_hdf5("./dandelion_model")

# Define the epsilon value
epsilon <- 0.1

# Loop over each file in the "dandelions" folder
file_list <- list.files(path = "dandelions", pattern = "\\.jpg$", full.names = TRUE)
for (file in file_list) {
  # Read the image
  image <- readJPEG(file)
  
  # Reshape the image to a 4D tensor with a batch size of 1
  image <- array_reshape(image, dim = c(1, dim(image)))
  
  # Perform FGSM attack on the image
  perturbed_image <- fgsm_attack(image, epsilon, model)
  
  # Reshape the perturbed image back to a 3D tensor
  perturbed_image <- array_reshape(perturbed_image, dim = dim(image)[-1])
  
  # Write the modified image to a new file
  writeJPEG(perturbed_image, paste0(file, "_perturbed.jpg"))
}

# Loop over each file in the "grass" folder
file_list2 <- list.files(path = "grass", pattern = "\\.jpg$", full.names = TRUE)
for (file in file_list2) {
  # Read the image
  image <- readJPEG(file)
  
  # Reshape the image to a 4D tensor with a batch size of 1
  image <- array_reshape(image, dim = c(1, dim(image)))
  
  # Perform FGSM attack on the image
  perturbed_image <- fgsm_attack(image, epsilon, model)
  
  # Reshape the perturbed image back to a 3D tensor
  perturbed_image <- array_reshape(perturbed_image, dim = dim(image)[-1])
  
  # Write the modified image to a new file
  writeJPEG(perturbed_image, paste0(file, "_perturbed.jpg"))
}



library(keras)
library(jpeg)

# Set up the FGSM attack parameters
epsilon <- 0.1
step_size <- 0.01

# Define the FGSM attack function
fgsm_attack <- function(x, y, model) {
  # Compute the loss and the gradient of the loss with respect to the input
  loss <- K$categorical_crossentropy(y, model(x))
  grad_fn <- K$gradients(loss, x)
  get_grads <- K$function(inputs = list(x, y), outputs = grad_fn)
  grads <- get_grads(list(x, y))[[1]]
  
  # Compute the sign of the gradient
  sign_grads <- sign(grads)
  
  # Add the sign of the gradient to the original input
  x_adv <- x + epsilon * sign_grads
  
  # Clip the adversarial input to the valid image range
  x_adv <- pmax(pmin(x_adv, 1), 0)
  
  # Return the adversarial input
  return(x_adv)
}

# Get a list of all JPG files in the "dandelions" folder
file_list <- list.files(path = "dandelions", pattern = "\\.jpg$", full.names = TRUE)

# Load the pre-trained model
model <- load_model_hdf5("my_model.h5")

# Loop over each file in the list
for (file in file_list) {
  # Read the image
  image <- readJPEG(file)
  
  # Preprocess the image for the model
  image <- image / 255
  
  # Apply the FGSM attack to the image
  label <- matrix(c(0,1), nrow = 1) # This assumes that the model predicts "dandelion" for label [0,1]
  x_adv <- fgsm_attack(image, label, model)
  
  # Convert the adversarial input back to an image
  x_adv <- x_adv * 255
  x_adv <- as.raster(x_adv)
  
  # Write the modified image to a new file
  writeJPEG(x_adv, paste0(file, "_modified.jpg"))
}
